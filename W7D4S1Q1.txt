W7D4S1Q1

thunderClient copy-paste url and add '/add-item'
in body --> {"name":Oranges,"price":2.0},, save it--give data as per question
and send request to see response

bind method

const http = require('http');
const url = require('url');

class ShoppingList{
    constructor(){
        this.groceries = [];
        this.totalPrice = 0;
        this.handleRequest = this.handleRequest.bind(this);
    }

    addItem(name, price){
        this.groceries.push({name, price});
    }

    calculateTotalPrice(){
        this.totalPrice = this.groceries.reduce((total, item) => total + item.price, 0);
    }

    handleRequest(request, response){
        const {pathname} = url.parse(request?.url, true);
        if(request.method === "POST" && pathname === "/add-item"){
            let body = '';
            request.on('data', (chunk) => {
                body += chunk.toString();
            }).on('end', () => {
                try {
                    console.log(body);
                    const {name, price} = JSON.parse(body);
                    if(typeof name !== 'string' || typeof price !== 'number' || price < 0 ){
                        response.writeHead(400, { 'Content-Type': 'text/plain' });
                        return response.end('Invalid input data');
                    }
                    this.addItem(name, price);
                    this.calculateTotalPrice();
                    response.writeHead(200, { 'Content-Type': 'application/json' });
                    response.end(JSON.stringify({groceries: this.groceries, totalPrice: this.totalPrice}));
                } catch (error) {
                    console.log(error);
                    response.writeHead(400, { 'Content-Type': 'application/json' });
                    response.end(JSON.stringify({message:'Invalid json format'}));
                }
            })
        } else{
            response.writeHead(404, {'Content-Type': 'text/plain'});
            response.end('Not Found');
        }
    }
}

const shoppingList = new ShoppingList();
// const server = http.createServer((request, response) => shoppingList.handleRequest(request, response));
const server = http.createServer(shoppingList.handleRequest);
function startServer(port = 8080){

    const server = http.createServer(shoppingList.handleRequest);
    server.listen(8080, () => {
        console.log(`Server running at port: ${8080}`);
    }).on('end', (err) => {
        if(err.code === 'EADDRINUSE'){
            console.log(`Port ${port} in use.`);
            startServer(port + 1);
        }else{
            console.log(`Error occurred: ${err}`);
        }
    })
}

if(require.main === 'module'){
    startServer();
}

module.exports = shoppingList;