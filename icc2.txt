Checkout.html###############################################################################

<div class="container justify-content-center align-items-center mt-5 mb-5" style="max-width:600px;">
    <div class="card shadow p-4">
        <h3 class="text-center text-success mb-4">Order Confirmation</h3>
        <!-- Invoice section -->
        <div class="border rounded p-3 mb-4 bg-light">
            <h5 class="mb-3">Invoice</h5>
            <div *ngIf="item">
                <div class="d-flex justify-content-between">
                    <span><strong>{{ item.name }}</strong></span>
                    <span><strong>Price: {{ item.price }}</strong></span>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Quantity: {{ item.quantity }}</span>
                </div>
                <hr/>
                <div class="d-flex justify-content-between">
                    <strong>Total Amount:</strong>
                    <strong> {{item.price * item.quantity}}</strong>
                </div>
            </div>
        </div>
        <!-- shipping form -->
        <div>
            <h5 class="mb-3">Enter Shipping Details</h5>
            <div class="mb-3">
            <label for="shippingAddress" class="form-label fw-semibold">Shipping Address:</label>
            <input type="text" class="form-control" id="shippingAddress" [(ngModel)]="shippingAddress" placeholder="Enter shipping address">

        </div>
        <div class="mb-4">
            <label for="billingAddress" class="form-label fw-semibold">Billing Address:</label>
            <input type="text" class="form-control" id="billingAddress" [(ngModel)]="billingAddress" placeholder="Enter billing address">
        </div>
        <button class="btn btn-success w-100" (click)="placeOrder()">Place Order</button>
    </div>
    </div>

</div>

checkout.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-checkout',
  templateUrl: './checkout.component.html',
  styleUrls: ['./checkout.component.css']
})
export class CheckoutComponent implements OnInit {
  item:any;
  shippingAddress:string ='';
  billingAddress:string='';


  constructor() { }

  ngOnInit(): void {
    this.item={
      name:'Bonsai',
      quantity:1,
      price:45
    };
  }
  placeOrder():void{
    if(!this.shippingAddress || !this.billingAddress){
      alert('Please fill in both shipping and billing addresses.');
      return;
    }
    alert('Order placed successfully!\n\nShipping: ' + this.shippingAddress + '\nBilling: ' +this.billingAddress);
    
  }

}

deletepop-up.ts
import { Component, EventEmitter, OnInit, Output } from '@angular/core';

@Component({
  selector: 'app-delete-popup',
  template: `<div class="popup">
            <p> Are you sure want to delete this plant?</p>
            <button (click)="confirmDelete()">Yes, Delete</button>
            <button (click)="cancelDelete()">Cancel</button>
</div>
            `,
            styles:[`
            .popup{
              background-color:white;
              padding:16px;
              border-radius:8px;
              box-shadow: 0 0 10px gray;
              text-align: center;
            }
            button{
              margin:0 8px;
            }
            `]

  
})
export class DeletePopupComponent implements OnInit {
  @Output() onConfirm = new EventEmitter<void>();
  @Output() onCancel = new EventEmitter<void>();


  constructor() { }

  ngOnInit(): void {
  }
  confirmDelete(){
    this.onConfirm.emit();
  }
  cancelDelete(){
    this.onCancel.emit();
  }

}


login.html
<div class="container mt-5 pt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8 shadow rounded p-4 d-flex">
            <!-- left image -->
            <div class="col-md-6  d=md-block">
                <img src="assets/images/login.png" class="img-fluid rounded" alt="login illustration" class="img-fluid h-100 w-100 object-fit-contain"/>
            </div>
            <!-- right form -->
            <div class="col-md-6 bg-light p-4">
                <div class="text-center mb-3">
                    <img src="assets/images/logo.png" width="50" alt="logo"/>
                    <h5 class="mt-2 fw-bold">NurseryPro</h5>
                    <small class="text-muted">Login</small>
                </div>
                <form #loginForm="ngForm" (ngSubmit)="handleLogin()">
                    <!--email  -->
                    <div class="mb-3">
                        <input type="email" name="email" class="form-control" placeholder="Email" [(ngModel)]="formData.email" #email="ngModel" required email/>
                        <div *ngIf="email.invalid && email.touched" class="text-danger small mt-1">
                            Please enter a valid email
                        </div>
                    </div>

                <!-- Password -->
                <div class="mb-3">
                    <input type="password" name="password" class="form-control" placeholder="Password" [(ngModel)]="formData.password" #password="ngModel" required minlength="6"/>
                    <div *ngIf="password.invalid && password.touched" class="text-danger small mt-1">
                        Password must be at least 6 characters
                    </div>
                </div>
                <!-- Forgot password -->
                <div class="d-flex justify-content-between mb-3">
                    <a href="#" class="text-decoration-none small">Forgot Password?</a>
                </div>
                <!-- Login Button -->
                <button type="submit" class="btn btn-primary w-100"[disabled]="loginForm.invalid">Login</button>
                <!-- signup link -->
                <div class="text-center mt-3">
                    <small>Don't have an account? <a [routerLink]="['/signup']" class="text-decoration-none">Signup</a></small>
                </div>
        </form>
            </div>
        </div>
    </div>
</div>

login.ts

import { Component, OnInit } from '@angular/core';

import { Router } from '@angular/router';
import { NavbarService } from 'src/app/services/navbar.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  formData={
    email:'',
    password:''
  };
  error={
    email:'',
    password:''
  };

  constructor(private router:Router, private navbarservice:NavbarService) { }
  ngOnInit(): void {
    localStorage.removeItem('email');
    localStorage.removeItem('role');
  }
  validateField(field:string, value:string):void{
    if(field ==='email'){
      const emailRegex =/^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      this.error.email = emailRegex.test(value)?'':'Please enter a valid email';
    }
    if(field ==='password'){
      this.error.password=value.length>=6 ? '':'Password must be at least 6 characters';
    }
  }

  handleLogin():void{
    this.validateField('email',this.formData.email);
    this.validateField('password',this.formData.password);

    if(this.error.email || this.error.password){
      return;
    }
if(this.formData.email.toLowerCase().includes('admin')){
  localStorage.setItem('role','admin');
  this.navbarservice.setAdmin();
  this.router.navigate(['/dashboard']);
 
} else{

  localStorage.setItem('role','user');
  this.router.navigate(['/home']);
}
   
  }

  

}


myreview.html
<div class="container mt-4">
    <h2 class="mb-4">My Reviews</h2>
    <div *ngIf="reviews.length === 0" class="alert alert-info">
        No reviews found.
    </div>
    <div *ngFor="let review of reviews" class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">{{ review.plantName }}</h5>
            <div class="d-flex justify-content-between mb-2">
                <div>
                    <span class="text-warning">
                        <ng-container *ngFor="let star of getStarArray(review.rating)">
                            <i class="fas fa-star" *ngIf="star === 'full'"></i>
                            <i class="fas fa-star" *ngIf="star === 'empty'"></i>
                        </ng-container>
                    </span>
                    <span class="text-muted ms-2">{{ review.date | date:'MMM d, y'}}</span>
                </div>
            </div>
            <p class="card-text">{{review.text}}</p>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary btn-sm" (click)="openPlantModal(review.plantId)">
                    View Plant
                </button>
                <button class="btn btn-outline-danger btn-sm" (click)="confirmDelete(review.id)">
                    Delete Review
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Plant Details modal -->
<div class="modal fade" id="plantModal" tabindex="-1" aria-labelledby="plantModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">{{ selectedPlant?.name }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="close"></button>
            </div>
            <div class="modal-body">
                <img [src]="selectedPlant?.image" class="img-fluid mb-3" alt="Plant image">
                <p><strong>Price:</strong> {{ selectedPlant?.price | currency }}</p>
                <p><strong>Category:</strong> {{ selectedPlant?.Category}}</p>
                <p><strong>Price:</strong> {{ selectedPlant?.description }}</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

            </div>
            <div class="modal-body">
                Are you sure want to delete this review?
            </div>
            <div class="modal-footer">
                Are you sure you want to delete this review?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" (click)="deleteReview()">Delete</button>
            </div>
        </div>
    </div>
</div>


myreview.ts
import { Component, OnInit } from '@angular/core';

declare var bootstrap:any;
@Component({
  selector: 'app-myreview',
  templateUrl: './myreview.component.html',
  styleUrls: ['./myreview.component.css']
})
export class MyreviewComponent implements OnInit {
  reviews=[
    {
      id:1,
      plantId: 101,
      plantName:'Aloe Vera',
      rating: 4,
      date: new Date(),
      text:'Great plant, very easy to care for!',
    },
    {
      id:1,
      plantId: 101,
      plantName:'Aloe Vera',
      rating: 4,
      date: new Date(),
      text:'Great plant, very easy to care for!',
    },
    {
      id:2,
      plantId: 102,
      plantName:'Snake Plant',
      rating: 5,
      date: new Date(),
      text:'Look beautiful and needs little watering.',
    },

  ];
  plants=[
    {
      id:101,
      name:'Aloe Vera',
      image:'',
      price:250,
      category:'Succulent',
      description:'Medical and air-purifying plant.',
    },
    {
      id:102,
      name:'Snake Plant',
      image:'',
      price:300,
      category:'Indoor',
      description:'Low-maintenance and great for indoor use.',
    },

  ];
  selectedPlant:any=null;
  reviewToDelete:number |null = null;
  openPlantModal(plantId:number){
    this.selectedPlant = this.plants.find(p=>p.id === plantId);
    const modalElement = document.getElementById('plantModal');
    if(modalElement){
      const modal = new bootstrap.Modal(modalElement);
      modal.show();
    }
  }
  confirmDelete(reviewId: number){
    this.reviewToDelete = reviewId;
    const modalElement = document.getElementById('deleteModal');
    if(modalElement){
      const modal = new bootstrap.Modal(modalElement);
      modal.show();
    }
  }
  deleteReview(){
    if(this.reviewToDelete !== null){
      this.reviews = this.reviews.filter(r =>r.id !== this.reviewToDelete);
      this.reviewToDelete = null;
      const modalElement = document.getElementById('deleteModal');
      if(modalElement){
        const modal = bootstrap.Modal.getInstance(modalElement);
        modal.hide();
      }
    }
  }
  getStarArray(rating:number):string[] {
    const fullStars = Array(rating).fill('full');
    const emptyStars = Array(5 - rating).fill('empty');
    return [...fullStars, ...emptyStars];

  }


  constructor() { }

  ngOnInit(): void {
  }

}

orderplaced.html
<div class="container mt-4">
    <h2 class="mb-4 text-center">orders placed</h2>
    <div class="d-flex justify-content-between mb-3">
        <input type="text" class="form-control w-50 me-2" placeholder="Search orders..."[(ngModel)]="searchTerm">
        <select class="form-select w-25" [(ngModel)]="sortOrder">
            <option value="asc">Sort by Date:Ascending</option>
            <option value="dsc">Sort by Date:Descending</option>
        </select>
    </div>
    <div *ngFor="let order of filteredOrders()" class="card mb-3 p-3 shadow-sm">
        <h5><strong>Order ID:</strong>{{ order.id }}</h5>
        <p><strong>Date:</strong>{{ order.date }}</p>
        <p><strong>Total Amount:</strong>{{ order.totalAmount }}</p>
        <p><strong>Order Status:</strong>{{ order.status }}</p>
        <p><strong>Shipping Address:</strong>{{ order.shippingAddress }}</p>
        <p><strong>Billing Address:</strong>{{ order.billingAddress }}</p>
        <div class="mb-3">
            <label for="statusSelect" class="form-label fw-semibold">Update Order Status:</label>
            <select class="form-select" [(ngModel)]="order.status" (change)="updateOrderStatus(order)">
                <option *ngFor="let status of statusOptions" [value]="status">{{ status }}</option>
            </select>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" (click)="openItemsModal(order)">View Items</button>
            <button class="btn btn-success" (click)="openProfileModal(order)">View Profile</button>
        </div>
    </div>
    <!-- Order Items Modal -->
    <div class="modal" tabindex="-1" [ngClass]="{ 'show d-block': selectedOrder }" *ngIf="selectedOrder">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Items</h5>
                    <button type="button" class="btn-close" (click)="selectedOrder = null"></button>

                </div>
                <div class="modal-body">
                    <div *ngFor="let item of selectedOrder.items">
                        <p><strong>{{item.name}}</strong>- Quantity:{{ item.quantity }} - Price:{{ item.price }}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Profile Modal -->
    <div class="modal" tabindex="-1" [ngClass]="{'show d-block': selectedProfile}" *ngIf="selectedProfile">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Profile</h5>
                    <button type="button" class="btn-close" (click)="selectedProfile= null"></button>

                </div>
                <div class="modal-body">
                    <p><strong>Username:</strong>{{ selectedProfile.Username}}</p>
                    <p><strong>Email:</strong>{{ selectedProfile.email}}</p>
                    <p><strong>Mobile:</strong>{{ selectedProfile.mobile}}</p>
                </div>
            </div>
        </div>
    </div>
</div>

orderplaced.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-orderplaced',
  templateUrl: './orderplaced.component.html',
  styleUrls: ['./orderplaced.component.css']
})
export class OrderplacedComponent implements OnInit {
  orders:any[]=[];
  searchTerm:string='';
  sortOrder:string='';
  selectedOrder:any=null;
  selectedProfile:any=null;
  statusOptions:string[]=['Pending','Accepted','Dispatched','OutForDelivery','Delivered'];

  constructor() { }

  ngOnInit(): void {
    this.orders =[
      {
        id:'67d',
        date:'Mar 17 2025',
        totalAmount:1198,
        status:'Delivered',
        shippingAddress:'demo address 2',
        billingAddress:'demo billing Address 3',
        items:[
          {name:'Bonsai',quantity:3,price:45},
          {name:'Apricot',quantity:1,price:599},
        ],
        user:{
          username:'user123',
          email:'user@example.com',
          mobile:'9876543210'
        }
      },


    ]
  }
  filteredOrders(): any[]{
    let filtered = this.orders.filter(order => order.id.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
    order.user?.username.toLowerCase().includes(this.searchTerm.toLowerCase()));
    return filtered.sort((a,b)=>{
      const dateA = new Date(a.date).getTime();
      const dateB = new Date(b.date).getTime();
      return this.sortOrder === 'asc'? dateA - dateB:dateB-dateA; 

    });
  }
  updateOrderStatus(order:any){
    console.log(`Updated status of ${order.id} to ${order.status}`);
  }
  openItemsModal(order:any){
    this.selectedOrder = order;
  }
  openProfileModal(order:any){
    this.selectedProfile = order.user;
  }


}

plantcreate.html
<div class="container-fluid bg-light p-5" style="background-image:url('assets/images/background.webp')">
    <div class="row justify-content-end">
        <div class="col-md-5 bg-white p-4 rounded-4 shadow">
            <h5 class="text-center fw-bold mb-4">Add New Plant</h5>

            <form [formGroup]="plantForm" (ngSubmit)="onSubmit()">
                <!-- plant name -->
                <div class="mb-3">
                    <input type="text" class="form-control" formControlName="plantName" placeholder="Plant Name *">
                    <small class="text-danger" *ngIf="plantForm.get('plantName')?.touched && plantForm.get('plantName')?.invalid">Plant name is required</small>
                </div>
                <!-- description -->
                <div class="mb-3">
                    <textarea class="form-control" formControlName="description" placeholder="Description *" rows="2"></textarea>
                    <small class="text-danger" *ngIf="plantForm.get('plantName')?.touched && plantForm.get('plantame')?.invalid">Plant name is required</small>
                </div>
                <!-- price -->
                <div class="mb-3">
                    <input type="number" class="form-control" formControlName="price" placeholder="Price *">
                    <small class="text-danger" *ngIf="plantForm.get('price')?.touched && plantForm.get('price')?.invalid">
                        Price must be greater than or equal to 1
                    </small>
                </div>
                <!-- stock quantity-->
                <div class="mb-3">
                    <input type="number" class="form-control" formControlName="stockQuantity" placeholder="Stock Quantity *">
                    <small class="text-danger" *ngIf="plantForm.get('stockQuantity')?.touched && plantForm.get('stockQuantity')?.invalid">
                        Stock quantity must be valid
                    </small>
                </div>
                <!-- Category -->
                <div class="mb-3">
                    <select class="form-select" formControlName="category">
                        <option value="">Select Category *</option>
                        <option value="Indoor">Indoor</option>
                        <option value="Outdoor">Outdoor</option>
                        <option value="Succulent">Succulent</option>
                        <option value="Flowering">Flowering</option>
                    </select>
                    <small class="text-danger" *ngIf="plantForm.get('category')?.touched && plantForm.get('category')?.invalid">
                        Category is required
                    </small>
                </div>
                <!-- Image Upload -->
                <div class="mb-3">
                    <input type="file" class="form-control" (change)="handleFileChange($event)">
                    <small class="text-danger" *ngIf="imageError">{{ imageError }}</small>
                </div>
                <!-- Submit Button -->
                <button class="btn btn-success w-100" type="submit" [disabled]="plantForm.invalid">Add Plant</button>


            </form>
        </div>
    </div>
</div>
<div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center" 
*ngIf="successPopupVisible" style="background-color: rgba(0, 0, 0, 0.5); z-index: 9999;">
<div class="bg-white p-4 rounded shadow text-center" style="width: 300px;">
    <h6 class="mb-3 text-success">Plant Added Successfully</h6>
    <button class="btn btn-sm btn-outline-primary" (click)="closePopup()">OK</button>
</div>
</div>
plantcreate.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-plant-create',
  templateUrl: './plant-create.component.html',
  styleUrls: ['./plant-create.component.css']
})
export class PlantCreateComponent implements OnInit {
  plantForm!:FormGroup;
  imageError='';
  coverImageBased64 ='';
  successPopupVisible = false;

  constructor(private fb: FormBuilder) { }

  ngOnInit(): void {
    this.plantForm=this.fb.group({
      plantName:['',Validators.required],
      description:['',Validators.required],
      price:[null,[Validators.required,Validators.min(1)]],
      stockQuantity:[null,[Validators.required,Validators.min(1)]],
      category:['',Validators.required],
      coverimage:['']

    });
  }
  handleFileChange(event:any):void{
    const file = event.target.files[0];
    if(file){
      const fileType = file.type;
      const fileSize = file.size;
    
    if(!['image/jpeg','image/jpg','image/png'].includes(fileType)) {
      this.imageError ='Only JPG, JPEG, PNG formats are allowed';
      return;
    }
    if(fileSize>5 * 1024 * 1024){
      this.imageError = 'File size should not exceed 5MB';
      return;
    }
    const reader = new FileReader();
    reader.onload=()=>{
      this.coverImageBased64 = reader.result as string;
      this.plantForm.patchValue({coverimage: this.coverImageBased64});
      this.imageError ='';
    };
    reader.readAsDataURL(file);
  }

  }
  onSubmit():void{
    if(this.plantForm.valid){
      console.log('Form Submitted', this.plantForm.value);
      this.successPopupVisible = true;
      this.plantForm.reset();
    } else{
      this.plantForm.markAllAsTouched();
    }
  }
  closePopup():void{
    this.successPopupVisible = false;
  }

}

review.html
<div class="container vh-100 d-flex justify-content-center align-items-center">
    <div class="card p-4 shadow" style="width: 100%; max-width: 500px;">
        <h2 class="card-title text-center mb-3">Submit Your Review</h2>
    
    <textarea placeholder="Write your review here..." [(ngModel)]="reviewText" rows="5" cols="50" class="form-control mb-3"></textarea>
    <div class="start-rating text-center mb-3">
        <span *ngFor="let star of stars; let i=index" (click)="rate(i+1)">
            <i class="fa" [class.fa-star]="i < rating"[class.fa-star-o]="i>= rating"></i>
        </span>
    </div>
    <button class="btn btn-success w-100" (click)="submitReview()">Submit Review</button>

</div>
</div>

review.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-review',
  templateUrl: './review.component.html',
  styleUrls: ['./review.component.css']
})
export class ReviewComponent implements OnInit {
reviewText: string='';
rating:number=0;
stars: boolean[] = Array(5).fill(false);

rate(starIndex:number):void{
  this.rating = starIndex;
  this.stars = this.stars.map((_,i)=> i< starIndex);
}
submitReview(): void{
  if(this.reviewText && this.rating){
    console.log('Review submitted:', this.reviewText,'Rating:',this.rating);
    this.reviewText ='';
    this.rating =0;
    this.stars.fill(false);

  }
  else{
    alert('Please provide both a review text and a rating.')
  }
}
  constructor() { }

  ngOnInit(): void {
  }

}

header.html
<nav class="navbar navbar-expand-lg navbar-dark px-4" style="background: linear-gradient(to right, #388e3c, #c62828);">
    <a class="navbar-brand fw-bold" href="#">GreenGarden</a>
    <div class="ms-auto d-flex align-items-center gap-3">
        <span class="text-white me-2 fw-semibold">{{ userRole ==='Admin'? 'demo12 / Admin':'demo12/User'}}</span>
        <a class="nav-link text-white" href="#">Home</a>
        <a class="nav-link text-white" routerLink="dashboard">Dashboard</a>
        <a class="nav-link text-white" routerLink="viewplants">Plants</a>
        <a class="nav-link text-white" href="#">Orders</a>
        <a class="nav-link text-white" routerLink="adminreviews">Reviews</a>
       <button class="btn btn-danger btn-sm">Logout</button>
    </div>
</nav>

header.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {
  userRole:string='User';

  constructor() { }

  ngOnInit(): void {
  }

}

signup.html
<div class="container mt-5 pt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8 shadow-lg rounded-4  overflow-hidden  d-flex">
            <!-- left image -->
            <div class="col-md-6  d-md-block bg-white p-3">
                <img src="assets/images/login.png" class="img-fluid rounded" alt="signup illustration" class="img-fluid h-100 w-100 object-fit-contain" style="border-radius:10px;"/>
            </div>
            <!-- right form -->
            <div class="col-md-6 bg-light p-4">
                <div class="text-center mb-3">
                    <img src="assets/images/logo.png" width="50" alt="logo"/>
                    <h5 class="mt-2 fw-bold">NurseryPro</h5>
                    <small class="text-muted">Signup</small>
                </div>
                <form (ngSubmit)="handleSubmit()" #signupForm="ngForm" >

                    <!--username -->
                    <div class="mb-2">
                        <input type="text" class="form-control" name="username"  placeholder="Username" [(ngModel)]="formData.username" (blur)="validateField('username',formData.username)">
                        <div *ngIf="errors.username" class="text-danger small">{{ errors.username}}</div>
                    </div>
                    <!-- email -->
                    <div class="mb-2">
                        <input type="email" class="form-control" name="email"  placeholder="Email" [(ngModel)]="formData.email" (blur)="validateField('email',formData.email)">
                        <div *ngIf="errors.email" class="text-danger small">{{ errors.email}}</div>
                    </div>
                    <!-- mobile -->
                    <div class="mb-2">
                        <input type="text" class="form-control" name="mobile"  placeholder="Mobile" [(ngModel)]="formData.mobile" (blur)="validateField('mobile',formData.mobile)">
                        <div *ngIf="errors.mobile" class="text-danger small">{{ errors.mobile}}</div>
                    </div>
                    <!-- password -->
                    <div class="mb-2">
                        <input type="password" class="form-control" name="password" placeholder=" Password" [(ngModel)]="formData.password" (blur)="validateField('Password',formData.password)">
                        <div *ngIf="errors.password" class="text-danger small">{{errors.password}}</div>
                    </div>


                    <!-- confirmpassword -->
                    <div class="mb-2">
                        <input type="password" class="form-control" name="confirmPassword" placeholder="confirm Password" [(ngModel)]="formData.confirmPassword" (blur)="validateField('confirmPassword',formData.confirmPassword)">
                        <div *ngIf="errors.confirmPassword" class="text-danger small">{{errors.confirmPassword}}</div>
                    </div>
                    <!-- role -->
                    <div class="mb-3">
                        <select class="form-select" name="role" [(ngModel)]="formData.role" (blur)="validateField('role','formData.role')">
                            <option value="" disabled selected>Select Role</option>
                            <option value="admin">Admin</option>
                            <option value="user">User</option>
                        </select>
                        <div *ngIf="errors.role" class="text-danger small">{{errors.role}}</div>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Signup</button>

                        <div class="text-center mt-3">
                            <small>Already have an account? <a [routerLink]="['/login']" class="text-decoration-none">Login</a></small>
                        </div>
                        </form>
                   </div>
        </div>
    </div>
</div>


signup.ts
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css']
})
export class SignupComponent implements OnInit {
  formData ={
    username:'',
    email:'',
    mobile:'',
    password:'',
    confirmPassword:'',
    role:''
  };
  errors: any ={};

  constructor(private router: Router) { }
  validateField(fieldName:string, value:string){
    switch(fieldName){
      case 'username':
        this.errors.username = !value.trim() ?'Username is required':'';
        break;
      case 'email':
        const emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
        this.errors.email = !emailRegex.test(value)?'Email is invalid':'';
        break;
      case 'mobile':
        const mobileRegex = /^[0-9]{10}$/;
        this.errors.mobile = !mobileRegex.test(value)? 'Mobile number must be 10 digits':'';
        break; 
      case 'password':
        this.errors.password = value.length<6 ?'Password must be at least 6 characters':'';
        break;  
        
      case 'confirmPassword':
        this.errors.confirmPassword = value!== this.formData.password ? 'Passwords do not match':'';
        break; 
      case 'role':
        this.errors.role = !value ?'Role is required':'';
        break;    
    }
  }
  handleSubmit(){
    Object.keys(this.formData).forEach(field =>{
      this.validateField(field , this.formData[field]);
    });
    if(Object.values(this.errors).every(e=>e==='')){
      localStorage.setItem('registeredUser',JSON.stringify(this.formData));
      alert('User Registration Successful!');
      this.router.navigate(['/login']);
    }
  }
  

  ngOnInit(): void {
  }

}

usernav.html
<nav class="navbar navbar-expand-lg navbar-dark shadow-sm px-4" style="background:  linear-gradient(to right, #388e3c,#c62828);">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold text-white">GreenGarden</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navLinkUser">
            <span class="navbar-toogler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinkUser">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <div class="d-flex align-items-center ms-3 gap-2">
                    <span class="badge bg-dark" style="cursor: pointer;" (click)="switchToAdmin()">Demouser/user</span>
                  
                </div>
            <li class="nav-item"><a class="nav-link text-white"routerLink="home" routerLinkActive="active">Home</a></li>
            <li class="nav-item"><a class="nav-link text-white"routerLink="userplant" routerLinkActive="active">Plant</a></li>
            <li class="nav-item"><a class="nav-link text-white"routerLink="myreview" routerLinkActive="active">Review</a></li>
            <li class="nav-item">
                <a class="nav-link text-white position-relative" routerLink="/cart">
                    <i class="bi bi-cart-fill"></i>
                    <span
                      class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">2
                    </span>
                    
                </a>
            </li>
            <button class="btn btn-danger bt -sm">Logout</button>
            </ul>
           
        </div>
    </div>
</nav>

usernav.ts
import { Component, OnInit } from '@angular/core';
import { NavbarService } from 'src/app/services/navbar.service';

@Component({
  selector: 'app-usernav',
  templateUrl: './usernav.component.html',
  styleUrls: ['./usernav.component.css']
})
export class UsernavComponent implements OnInit {
  
  constructor(private navBarService:NavbarService) { }

  switchToAdmin(){
    this.navBarService.setAdmin();
  }

  ngOnInit(): void {
  }

}

userviewplant.html
<div class="container mt-5 pt-4">
    <h1 class="text-center mb-4 border-bottom pb-2">Plants</h1>

<div class="row justify-content-center mb-4">
    <div class="col-md-6">
        <input type="text" class="form-control rounded-pill text-center" [(ngModel)]="searchField" placeholder="Search plants..." (input)="filterPlants()">
    </div>
</div> 
<div *ngIf="filteredPlants.length === 0" class="text-center text-muted mb-5">
    No plants found.
</div> 
<div class="row justify-content-center">
    <div class="col-md-4 mb-4" *ngFor="let plant of filteredPlants">
        <div class="card h-100 shadow-sm">
            <img [src]="plant.imageUrl" class="card-img-top" [alt]="plant.plantName" style="height: 250px; object-fit:cover;">
            <div class="card-body text-center">
                <h5 class="card-title">{{plant.plantName}}</h5>
                <p class="fw-bold text-secondary">Price: {{ plant.price }}</p>
                <p class="card-text small">{{plant.description}}</p>
            <!-- stock status -->
            <p *ngIf="plant.stockQuantity === 0" class="text-danger fw-bold">Out of Stock</p>
            <p *ngIf="plant.stockQuantity > 10" class="text-success fw-bold">In Stock: {{plant.stockQuantity}}</p>
            <p *ngIf="plant.stockQuantity > 0 && plant.stockQuantity <= 10" class="text-danger fw-bold">Limited stock available:{{ plant.stockQuantity }}</p>
            <p class="mb-1 text-muted">Category: {{plant.Category}}</p>

            <!--  Quantity Dropdown-->

            <div class="mb-2">
                <label class="form-label">Quantity</label>
                <select class="form-select form-select-sm w-50 mx-auto" [(ngModel)]="selectedQuantities[plant.plantName]">
                    <option *ngFor="let qty of generateQuantityOptions(plant.stockQuantity)" [value]="qty">{{qty}}</option>
                </select>
            </div>

            <!-- Buttons -->
            <button class="btn btn-outline-success btn-sm mb-2 w-75" (click)="addToCart(plant)">
                Add to Cart
            </button>
            <div class="d-flex justify-content-between">
                <button class="btn btn-success btn-sm w-50 me-1" data-bs-toggle="modal" data-bs-target="#reviewModal" (click)="openReviewModal(plant)">View Reviews</button>
                <button class="btn btn-warning btn-sm w-50 ms-1">Write a Review</button>
            </div>
        </div>
    </div>
</div>
</div> 
 <!--Review Modal -->
 <div class="modal fade" id="reviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header">
                <h5 class="modal-title fw-bold">Reviews for{{ selectedPlant?.plantName}}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" *ngIf="selectedPlant?.reviews?.length>0">
                <div *ngFor="let review of selectedPlantReview">
                    <p class="mb-1"><strong>{{review.user}}</strong></p>
                    <p class="mb-1"> Rating:{{ review.rating}} /5</p>
                    <p class="mb-1">{{ review.comment}}</p>
                    <p class="text-muted small">Date: {{ review.date }}</p>
                    <hr/>

                </div>
            </div>
            <div class="modal-body text-center text-muted" *ngIf="selectedPlant?.reviews?.length === 0"></div>
                No reviews found for this plant.
            </div>
        </div>
    </div>
 </div>
 

useriewplant.ts
import { Component, OnInit } from '@angular/core';

interface Review{
  username:string;
  rating:number;
  comment:string;
  date:string;


}
interface Plant{
  plantName:string;
  description:string;
  price:number;
  stockQuantity:number;
  category:string;
  imageUrl:string;
  reviews:Review[];
}

@Component({
  selector: 'app-userviewplant',
  templateUrl: './userviewplant.component.html',
  styleUrls: ['./userviewplant.component.css']
})
export class UserviewplantComponent implements OnInit {
  allPlants:Plant[]=[];
  filteredPlants:Plant[]=[];
  searchField:string ='';
  selectedPlant:Plant | null =null;
  showReviewModal:boolean = false;
  selectedQuantities: { [key: string]:number}={};
  errorMessage:{ [key: string]:string}={}

  constructor() { }

  ngOnInit(): void {
    this.fetchPlants();
    this.filterPlants();
  }
  fetchPlants():void{
    this.allPlants = [
      {
        plantName:'Apricot',
        description:'Fruit from the species Prunus armeniaca..',
        price:599,
        stockQuantity:24,
        category:'Fruits',
        imageUrl:'',
        reviews:[
          {
            username:'demouser',
            rating:5,
            comment:'Excellent health',
            date:'Mar 17 2025'
          }
        ]
},
{
  plantName:'Bonsai',
  description:'Miniature tree in containers...',
  price:45,
  stockQuantity:24,
  category:'Bonsai',
  imageUrl:'',
  reviews:[]
}
];
}
filterPlants():void {
  const term = this.searchField.toLowerCase();
  this,this.filteredPlants = this.allPlants.filter(plant =>
    plant.plantName.toLowerCase().includes(term) ||
    plant.description.toLowerCase().includes(term)
    );
}
getStocKMessage(stock:number):string{
  if(stock === 0) return 'Out of stock';
  if(stock <=10) return 'Limited stock available: ${stock}';
  return 'In Stock: ${stock}';
}
generateQuantityOptions(stock:number):number[]{
  return Array.from({length:stock},(_,i)=> i + 1);
 
}
addToCart(plant:Plant):void{
  const quantity = this.selectedQuantities[plant.plantName] ||0;
  if(quantity <=0 || quantity> plant.stockQuantity){
    this.errorMessage[plant.plantName] ='Invalid quantity selected.';
} else{
  alert(`${quantity} x ${plant.plantName} added to cart`);
  this.errorMessage[plant.plantName]='';
}
}


openReviewModal(plant:Plant):void{
  this.selectedPlant =plant;
  this.showReviewModal = true;

}
closeModal():void{
  this.showReviewModal = false;
  this.selectedPlant = null;
}
writeReview(plant:Plant):void{
  alert(`Navigate to write review page for ${plant.plantName}`);
}
}


highlight.directive.ts
import { Directive, ElementRef, Input, OnChanges} from '@angular/core';

@Directive({
  selector: '[appHighlightStock]'
})
export class HighlightStockDirective implements OnChanges{
  @Input() stockQuantity!:number;

  constructor(private el: ElementRef) { }
  ngOnChanges():void {
    const element = this.el.nativeElement as HTMLElement;
    
    if(this.stockQuantity<10){
      element.style.color ='red';
      element.style.fontWeight ='bold';
    } else{
      element.style.color='';
      element.style.fontWeight='';
    }
  }
 
  
  }


format-category.pipe.ts
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'formatCategory'
})
export class FormatCategoryPipe implements PipeTransform {

  transform(value: string|null): string {
    if(!value) return 'Unknown';
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
  
  }

}

navbar.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class NavbarService {
  private isAdminSubject = new BehaviorSubject<boolean>(false);
  isAdmin$ = this.isAdminSubject.asObservable();
  constructor(){
    const role = localStorage.getItem('role');
    if(role==='admin'){
      this.setAdmin();
    }
    else{
      this.setUser();
    }
  }

  toggleRole(){
    const current = this.isAdminSubject.value;
    this.isAdminSubject.next(!current);
  }
  setAdmin(){
    this.isAdminSubject.next(true);
  }
  setUser(){
    this.isAdminSubject.next(false);
  }
  getCurrenrRole():boolean{
    return this.isAdminSubject.value;
  }

  
}

order.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private baseUrl='http://localhost:3000';


  constructor(private http:HttpClient) { }
  placeOrder(order:any):Observable<any>{
    return this.http.post(`${this.baseUrl}/order/addOrder`,order);
  }
  getAllOrders():Observable<any>{
    return this.http.get(`${this.baseUrl}/order/getAllOrders`);
  }
  updateOrder(id:number,order:any):Observable<any>{
    return this.http.put(`${this.baseUrl}/order/updateOrder/${id}`,order);
  }
  deleteOrder(id:number):Observable<any>{
    return this.http.delete(`${this.baseUrl}/order/deleteOrder/${id}`);
  }
}

plant.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PlantService {
  private baseUrl='http://localhost:3000';


  constructor(private http:HttpClient) { }
  addPlant(plant:any):Observable<any>{
    return this.http.post(`${this.baseUrl}/plant/addPlant`,plant);
  }
  getAllPlants():Observable<any>{
    return this.http.get(`${this.baseUrl}/plant/getAllPlants`);
  }
  updatePlant(id:number,plant:any):Observable<any>{
    return this.http.put(`${this.baseUrl}/plant/updatePlant/${id}`,plant);
  }
  deletePlant(id:number):Observable<any>{
    return this.http.delete(`${this.baseUrl}/plant/deletePlant/${id}`);
  }
}

review.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class ReviewService {

  private baseUrl='http://localhost:3000';


  constructor(private http:HttpClient) { }
  addReview(review:any):Observable<any>{
    return this.http.post(`${this.baseUrl}/review/addReview`,review);
  }
  getAllReviews():Observable<any>{
    return this.http.get(`${this.baseUrl}/review/getAllReviews`);
  }
  updateReview(id:number,review:any):Observable<any>{
    return this.http.put(`${this.baseUrl}/review/updateReview/${id}`,review);
  }
  deleteReview(id:number):Observable<any>{
    return this.http.delete(`${this.baseUrl}/review/deleteReview/${id}`);
  }
}


app-routing-modules.ts
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomePageComponent } from './components/home-page/home-page.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { AdminviewreviewsComponent } from './components/adminviewreviews/adminviewreviews.component';
import { AdminviewplantComponent } from './components/adminviewplant/adminviewplant.component';
import { UserviewplantComponent } from './components/userviewplant/userviewplant.component';
import { LoginComponent } from './components/login/login.component';
import { SignupComponent } from './components/signup/signup.component';
import { PlantCreateComponent } from './components/plant-create/plant-create.component';
import { ReviewComponent } from './components/review/review.component';
import { MyreviewComponent } from './components/myreview/myreview.component';
import { CheckoutComponent } from './components/checkout/checkout.component';
import { OrderplacedComponent } from './components/orderplaced/orderplaced.component';


const routes: Routes = [
  {path:'',redirectTo:'login',pathMatch:'full'},
  {path:'login',component:LoginComponent},
  {path:'signup',component:SignupComponent},
  {path:'home',component:HomePageComponent},
  {path:'dashboard',component:DashboardComponent},
  {path:'adminreviews',component:AdminviewreviewsComponent},
  {path:'adminviewplants',component:AdminviewplantComponent},
  {path:'userplant',component:UserviewplantComponent},
  {path:'createplants',component:PlantCreateComponent},
  {path:'review',component:ReviewComponent},
  {path:'myreview',component:MyreviewComponent},
  {path:'checkout',component:CheckoutComponent},
  {path:'orderplaced',component:OrderplacedComponent}
  
  


 
  
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }



app.modules
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { HomePageComponent } from './components/home-page/home-page.component';
import { AdminnavComponent } from './components/adminnav/adminnav.component';
import { AdminviewreviewsComponent } from './components/adminviewreviews/adminviewreviews.component';
import { AuthguardComponent } from './components/authguard/authguard.component';
import { CheckoutComponent } from './components/checkout/checkout.component';
import { ErrorComponent } from './components/error/error.component';
import { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';
import { LoginComponent } from './components/login/login.component';
import { MyorderComponent } from './components/myorder/myorder.component';
import { MyreviewComponent } from './components/myreview/myreview.component';
import { OrderplacedComponent } from './components/orderplaced/orderplaced.component';
import { PlantCreateComponent } from './components/plant-create/plant-create.component';
import { ReviewComponent } from './components/review/review.component';
import { SignupComponent } from './components/signup/signup.component';
import { UsernavComponent } from './components/usernav/usernav.component';
import { UserviewplantComponent } from './components/userviewplant/userviewplant.component';
import { ReactiveFormsModule } from '@angular/forms';
import { HeaderComponent } from './components/shared/header/header.component';
import { HighlightStockDirective } from './directives/highlight-stock.directive';
import { FormatCategoryPipe } from './pipes/format-category.pipe';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { HttpClientModule } from '@angular/common/http';
import { DeletePopupComponent } from './components/delete-popup/delete-popup.component';
import { AdminviewplantComponent } from './components/adminviewplant/adminviewplant.component';
import { CommonModule } from '@angular/common';


@NgModule({
  declarations: [
    AppComponent,

    HomePageComponent,
    DashboardComponent,
    AdminnavComponent,
    AdminviewreviewsComponent,
    AuthguardComponent,
    CheckoutComponent,
    ErrorComponent,
    ForgotPasswordComponent,
    LoginComponent,
    MyorderComponent,
    MyreviewComponent,
    OrderplacedComponent,
    PlantCreateComponent,
    ReviewComponent,
    SignupComponent,
    UsernavComponent,
    UserviewplantComponent,

    HeaderComponent,
    HighlightStockDirective,
    FormatCategoryPipe,
    DeletePopupComponent,
    AdminviewplantComponent,
    
    
  
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    RouterModule,
    HttpClientModule,
    ReactiveFormsModule,
    CommonModule
  ],

  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {
}


app.html
<ng-container *ngIf="!(router.url.includes('login') || router.url.includes('signup'))">

<ng-container *ngIf="navbarService.isAdmin$ | async; else userNav">
    <app-adminnav></app-adminnav>
</ng-container>
<ng-template #userNav>
    <app-usernav></app-usernav>
</ng-template>
</ng-container>
<router-outlet></router-outlet>