<!-- login.component.html -->
<div class="container min-vh-100 d-flex justify-content-center align-items-center">
  <div class="row shadow rounded overflow-hidden w-75">
    <!-- Left Image -->
    <div class="col-md-6 d-none d-md-block p-0">
      <img src="assets/images/login.png" alt="login" class="img-fluid h-100 w-100 object-fit-cover">
    </div>

    <!-- Login Form -->
    <div class="col-md-6 bg-white p-4 d-flex flex-column justify-content-center">
      <div class="text-center mb-3">
        <img src="assets/images/logo.png" alt="logo" width="50">
        <h5 class="mt-2 fw-bold">NurseryPro</h5>
        <small class="text-muted">Login</small>
      </div>

      <form #loginForm="ngForm" (ngSubmit)="handleLogin()" novalidate>
        <!-- Email Field -->
        <div class="mb-3 input-group">
          <span class="input-group-text"><i class="bi bi-envelope"></i></span>
          <input type="email" name="email" class="form-control" placeholder="example@gmail.com"
                 [(ngModel)]="formData.email" #email="ngModel" required
                 (blur)="validateField('email', formData.email)">
        </div>
        <div class="text-danger small" *ngIf="email.invalid && email.touched">
          Email is required
        </div>
        <div class="text-danger small" *ngIf="error.email && email.valid">
          {{ error.email }}
        </div>

        <!-- Password Field -->
        <div class="mb-3 input-group">
          <span class="input-group-text"><i class="bi bi-lock"></i></span>
          <input type="password" name="password" class="form-control" placeholder="********"
                 [(ngModel)]="formData.password" #password="ngModel" required minlength="6"
                 (blur)="validateField('password', formData.password)">
        </div>
        <div class="text-danger small" *ngIf="password.invalid && password.touched">
          Password is required
        </div>
        <div class="text-danger small" *ngIf="error.password && password.valid">
          {{ error.password }}
        </div>

        <!-- Forgot Password -->
        <div class="d-flex justify-content-end mb-2">
          <a routerLink="/forgot-password" class="small text-decoration-none">Forgot Password?</a>
        </div>

        <!-- Login Button -->
        <button type="submit" class="btn btn-primary w-100" [disabled]="loginForm.invalid">
          Login
        </button>

        <!-- Signup Link -->
        <div class="text-center mt-3">
          <small>Don't have an account?
            <a [routerLink]="['/signup']" class="text-decoration-none">Signup</a>
          </small>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add this in angular.json or index.html -->
<!-- Bootstrap and Icons CDN (in index.html) -->
<!-- 
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
--> 

<!-- login.component.ts -->
// Import necessary modules
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { NavbarService } from 'src/app/services/navbar.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  formData = {
    email: '',
    password: ''
  };

  error = {
    email: '',
    password: ''
  };

  constructor(private router: Router, private navbarService: NavbarService) {}

  ngOnInit(): void {
    localStorage.removeItem('email');
    localStorage.removeItem('role');
  }

  validateField(field: string, value: string): void {
    if (field === 'email') {
      if (!value) {
        this.error.email = 'Email is required';
      } else {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        this.error.email = emailRegex.test(value) ? '' : 'Please enter a valid email';
      }
    }

    if (field === 'password') {
      if (!value) {
        this.error.password = 'Password is required';
      } else {
        this.error.password = value.length >= 6 ? '' : 'Password must be at least 6 characters';
      }
    }
  }

  handleLogin(): void {
    this.validateField('email', this.formData.email);
    this.validateField('password', this.formData.password);

    if (this.error.email || this.error.password) {
      return;
    }

    if (this.formData.email.toLowerCase().includes('admin')) {
      localStorage.setItem('role', 'admin');
      this.navbarService.setAdmin();
      this.router.navigate(['/dashboard']);
    } else {
      localStorage.setItem('role', 'user');
      this.router.navigate(['/home']);
    }
  }
}


